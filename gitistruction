![GitLogo](Git-Logo-1788C.png)
# Работа с Git и GitHub

## 1.Проверка наличия установленного  Git
В терминале выполнить команду `git Version`
Если Git установлен, появится сообщение о версии программы, иначе сообщение об ошибке
## 2.Установка Git
Загружаем последнюю версию Git 
 с сайта [Установка git](https://git-scm.com/) 
 Устанавливаем с настройками по умолчанию
## 3. Настройка Git
При первом использовании Git необходимо представиться
Для этого нужно ввести в терминале две команды  
```
git config --global user.name "Ваше имя английскими буквами
git config --global user.ename "Ваша почта.@example.com
```

## 4.Инициалиация репозитория
В терминале переходим к папке, в которой хотим создать репозиторий. 
Выполняем команду 
```
git init
```
## 5.Запись изменений в репозиторий 
Для того, чтобы посмотреть информацию о текущем состоянии git, в терминале вводим команду 
```
git status
```
Чтобы добавить файл к следующему коммиту, необходимо ввести команду 
```
git add
```
чтобы добавить все изменения в файле, воспользуйтесь командой 
```
git add.
```
Чтобы создать коммит введите команду 
```
git commit -m "название коммита"
```
Чтобы посмотреть разницу между текущим и закоммиченным файлом, воспользуйтесь коммандой 
```
git diff
```

## 6. Прсмотр истории коммитов
Чтобы посмотреть историю всех коммитов, воспользуйтесь командой 
```
git log
```
Чтобы посмотреть более сжатую версию:
```
git log --oneline
```

## 7.Перемещение между сохранениями  
Чтобы перейти от одного коммита к другому, используйте команду 
```
git checkout
```
Чтобы вернуться к актуальному состоянию и продолжить работу, используйте комманду 
```
git checkout master
```
## 8. Игнорирование файлов
Для того, чтобы исключить из отслеживания в репозитории определенные файлы или папки, необходимо создать там файл .***gitignore*** и записать в него их названия, соответствующие таким файлом или пакетом. 

## 9. Создание веток в git
По умолчанию название основной ветки - *"master"*
Создать ветку можно командой:
```
git branch <название новой ветки>
```
Список веток в репозитории можно посмотреть с помощью команды: 
```
git branch
```
Текущая ветка будет отмечена звездочкой: 
   **\* main**

   ## 10. Слияние веток и разрешение конфликтов
Для слияния выбранной ветки с текущей, нужно выполнить команду 
``` 
git merge <название выбранной ветки >
```
создание веток с переключением в нее
Удаление веток и возможные ошибки 
сли была изменена одна и та же часть файла в обеих ветках, то может возникнуть конфликт, который потребует участия пользователя
vS code предлагает варианты разрешения. 
Чтобы разрешить конфликт, нужно выбрать один из вариантов. Либо объединить содержимое по-своему.
После разрешения конфликта нужно выполнить коммит слияния.

## 11. Удаление веток 
 
 Чтобы удалить ветку, воспользуйтесь командой 
 ```
 git branch -d <название ветки>
 ```
 Если находимся на ветке, то ее нельзя удалить; нужно перейти на другую ветку :
 ```
 git switch <название ветки>
 ```
После этого выполнить слияние веток.

Если же необходимо удалить неслитую ветку, воспользуйтесь командой 
```
git branch -D <название ветки>
```
# 12. Работа с удаленными репозиториями 
1. Создать аккаунт на GitHub
2. Создать локальный репозиторий 
3. Создать удаленный репозиторий
4. Связать удаленный репозиторий с локальным
5. Добавить удаленный репозиторий к проекту:
   
   git remote add <имя для репозитория><url адрес репозитория в сети>
   
   Для получения слияния изменений из удаленного репозитория используется команда:
   `
   git pull`

   Команда `git clone <ссылка удаленного репозитория>` позволяет скопировать удаленный репозиторий на свой компьютер 
   
   Команда `git push` позволяет направить изменения в удаленный репозиторий


## Fork 
1. Кнопка `Fork` позволяет сделать копию репозитория чужого пректа на своем аккаунте в GitHub

2. C помощью команды `git clone` мы можем поместить этот проект в свой репозиторий 

3. Команда 
```
cd <название папки>
```
позволяет перейти в репозитоий определенной папки

4. Чтоба внести свои изменения в проект, необходимо создать новую ветку, затем создать новый файл, внести изменения и закомитить. 
5. Затем отправить изменения с помощью команды `git push`
6. на gitHub нажать кнопку `pull request`, чтобы предложить изменения хозяину репозитория